import{_ as i,c as n,b as a,d as r,w as s,a as o,e,r as d,o as l}from"./app.34f80447.js";const O=JSON.parse('{"title":"Imperative Abstraction","description":"","frontmatter":{},"headers":[{"level":2,"title":"Penyebab Smell","slug":"penyebab-smell"},{"level":2,"title":"Contoh","slug":"contoh"},{"level":3,"title":"Masalah","slug":"masalah"},{"level":3,"title":"Penyelesaian","slug":"penyelesaian"},{"level":2,"title":"When to Ignore","slug":"when-to-ignore"}],"relativePath":"girish/abstraction/imperative/index.md"}'),h={name:"girish/abstraction/imperative/index.md"},p=o("",7),c=e("Perhatikan package "),m=e("before"),u=e(". Terdapat class CreateReport, DisplayReport, dan CopyReport. Disini sudah jelas terjadi imperative abstraction karena ketiga class tersebut merupakan kata kerja, bukan kata benda."),b=a("h3",{id:"penyelesaian",tabindex:"-1"},[e("Penyelesaian "),a("a",{class:"header-anchor",href:"#penyelesaian","aria-hidden":"true"},"#")],-1),_=a("p",null,"Operasi di dalam DisplayReport dan CopyReport, dipindahkan sebagai method ke dalam class Report. CreateReport dipindahkan sebagai constructor class Report.",-1),g=a("h2",{id:"when-to-ignore",tabindex:"-1"},[e("When to Ignore "),a("a",{class:"header-anchor",href:"#when-to-ignore","aria-hidden":"true"},"#")],-1),k=a("p",null,"Smell ini tidak perlu di-refactor bila class memang sengaja dibuat imperatif. Biasa terjadi ketika menerapkan design pattern state, command, atau strategy. Ketiga design pattern ini adalah Gang of Four design pattern, akan dipelajari di semester depan.",-1);function f(y,v,x,j,C,P){const t=d("github-url");return l(),n("div",null,[p,a("p",null,[c,r(t,{to:"before"},{default:s(()=>[m]),_:1}),u]),b,_,g,k])}var R=i(h,[["render",f]]);export{O as __pageData,R as default};
