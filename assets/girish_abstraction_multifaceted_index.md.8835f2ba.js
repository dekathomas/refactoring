import{_ as i,c as s,b as e,d as o,w as l,a as t,e as a,r,o as d}from"./app.5c0e4cd3.js";const E=JSON.parse('{"title":"Multifaceted Abstraction","description":"","frontmatter":{},"headers":[{"level":2,"title":"Penyebab Smell","slug":"penyebab-smell"},{"level":2,"title":"Contoh","slug":"contoh"},{"level":2,"title":"Masalah","slug":"masalah"},{"level":3,"title":"Penyelesaian","slug":"penyelesaian"}],"relativePath":"girish/abstraction/multifaceted/index.md"}'),c={name:"girish/abstraction/multifaceted/index.md"},h=t('<h1 id="multifaceted-abstraction" tabindex="-1">Multifaceted Abstraction <a class="header-anchor" href="#multifaceted-abstraction" aria-hidden="true">#</a></h1><p>Smell ini terjadi ketika ada class yang memiliki lebih dari satu tanggungjawab (violasi SRP).</p><p>Smell ini mirip dengan smell divergent change Martin Fowler. Biasanya divergent change disertai juga dengan smell large class.</p><h2 id="penyebab-smell" tabindex="-1">Penyebab Smell <a class="header-anchor" href="#penyebab-smell" aria-hidden="true">#</a></h2><ul><li><strong>General-purpose abstractions</strong>: software developer melakukan desain abstraksi yang berujung <a href="https://en.wikipedia.org/wiki/God_object" target="_blank" rel="noopener noreferrer">God Object</a>.</li><li><strong>Evolution without periodic refactoring</strong>: awalnya class masih langsing, namun seiring bertambahnya fitur, class bertambah tanggungjawab baru. Seharusnya ketika class semakin gemuk, developer sudah saatnya melakukan refactoring.</li><li><strong>The burden of processes</strong>: developer malas. Menambah method di class yang sudah ada memang lebih mudah ketimbang membuat class baru.</li></ul><h2 id="contoh" tabindex="-1">Contoh <a class="header-anchor" href="#contoh" aria-hidden="true">#</a></h2><h2 id="masalah" tabindex="-1">Masalah <a class="header-anchor" href="#masalah" aria-hidden="true">#</a></h2>',7),u=a("Perhatikan class "),_=a("Rectangle"),g=a(" di package "),m=e("code",null,"before",-1),p=a(". Disana terdapat field "),b=e("code",null,"width",-1),k=a(" dan "),f=e("code",null,"weight",-1),y=a(". Terdapat method "),v=e("code",null,"area()",-1),S=a(" dan "),T=e("code",null,"perimeter()",-1),w=a(". Dan juga terdapat method "),x=e("code",null,"print(String style)",-1),P=a("."),j=t('<p>Pada umumnya, domain logic dan presentation logic dipisah. Kita bisa berargumen bahwa class Rectangle memiliki dua tanggungjawab, yaitu mengurus kalkulasi Rectangle dan juga mengatur tampilan Rectangle ke dalam console.</p><h3 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-hidden="true">#</a></h3><p>Kita pindahkan method <code>print</code> di class <code>Rectangle</code> ke class yang baru. Karena di <code>print</code> juga terdapat smell primitive obsession, sekalian kita buatkan struktur baru menggunakan strategy design pattern. Perhatikan hasil refactor-nya di package <code>after</code>.</p>',3);function R(A,C,V,N,M,D){const n=r("github-url");return d(),s("div",null,[h,e("p",null,[u,o(n,{to:"before/Rectangle.java"},{default:l(()=>[_]),_:1}),g,m,p,b,k,f,y,v,S,T,w,x,P]),j])}var I=i(c,[["render",R]]);export{E as __pageData,I as default};
