import{_ as t,c as p,b as s,d as e,w as l,e as a,a as o,r as c,o as i}from"./app.5c0e4cd3.js";var r="/assets/hierarchy-missing-1.f503f43d.png";const na=JSON.parse('{"title":"Missing Hierarchy","description":"","frontmatter":{},"headers":[{"level":2,"title":"Penyebab","slug":"penyebab"},{"level":2,"title":"Penyelesaian","slug":"penyelesaian"},{"level":2,"title":"Contoh","slug":"contoh"},{"level":2,"title":"Contoh 1: java.swing.plaf.windows.XPStyle margin problems","slug":"contoh-1-java-swing-plaf-windows-xpstyle-margin-problems"},{"level":2,"title":"Contoh 2: Player, Monster, and NPC attack problems","slug":"contoh-2-player-monster-and-npc-attack-problems"},{"level":2,"title":"Julukan","slug":"julukan"},{"level":2,"title":"When to Ignore","slug":"when-to-ignore"}],"relativePath":"girish/hierarchy/missing/index.md"}'),d={name:"girish/hierarchy/missing/index.md"},y=s("h1",{id:"missing-hierarchy",tabindex:"-1"},[a("Missing Hierarchy "),s("a",{class:"header-anchor",href:"#missing-hierarchy","aria-hidden":"true"},"#")],-1),D=s("div",{class:"video-wrapper"},[s("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/Z0gVvdARFWw",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""})],-1),h=o('<p>Smell ini terjadi ketika mayoritas class-class turunannya (subclass) mempunyai method/behaviour yang seharusnya bisa ditempatkan pada superclass sebagai method atau <code>abstract</code> method.</p><p>Smell ini seringkali disandingkan dengan smell <a href="./../../../martin-fowler/oo-abusers/switch-statements/">Switch-statements</a> dikarenakan smell ini identik dengan pemakaian <code>if-else</code> atau <code>switch</code> statements yang berulang-ulang (termasuk dengan <code>instanceof</code> untuk class matching pada object dan typecasting).</p><h2 id="penyebab" tabindex="-1">Penyebab <a class="header-anchor" href="#penyebab" aria-hidden="true">#</a></h2><ul><li><strong>Misguided simplistic design &amp; Procedural approach to design</strong>: Developer (minim pengalaman/prosedural) menganggap bahwa pemakaian type value dan conditional statement dapat menyederhanakan desain software.</li><li><strong>Overlooking inheritance as a design technique</strong>: Developer menganggap inheritance berfungsi lebih ke penambahan variasi desain ketimbang untuk keperluan hierarkis.</li></ul><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-hidden="true">#</a></h2><p>Untuk menuntaskan smell tersebut, ada dua cara penyelesaian smell tersebut yaitu:</p><ul><li>Jika smell tersebut terjadi karena kesamaan method, lakukan introduce interface atau extract ke abstract class (superclass) untuk class-class terkait.</li><li>Jika smell tersebut terjadi dimana conditional statements dapat dijadikan class, extract method-method dan member sebagai superclass (abstract/interface) dimana setiap class turunannya mengimplementasikan method-method abstract dari superclass. Teknik ini tentunya akan menjalankan polymorphism method secara langsung pada object variatifnya.</li></ul><h2 id="contoh" tabindex="-1">Contoh <a class="header-anchor" href="#contoh" aria-hidden="true">#</a></h2><h2 id="contoh-1-java-swing-plaf-windows-xpstyle-margin-problems" tabindex="-1">Contoh 1: <code>java.swing.plaf.windows.XPStyle</code> margin problems <a class="header-anchor" href="#contoh-1-java-swing-plaf-windows-xpstyle-margin-problems" aria-hidden="true">#</a></h2><p><img src="'+r+`" alt="Hierarchical view of &#39;java.swing.plaf.windows.XPStyle&#39;" title="Hierarchical view of &#39;java.swing.plaf.windows.XPStyle&#39;"></p><p>Salah satu kasus yang disinggung oleh Girish adalah masalah margin dari class <code>java.swing.plaf.windows.XPStyle</code> dimana terdapat bagian code yang melakukan cek margin dari ketiga komponen tersebut yaitu <code>AbstractButton</code>, <code>JToolBar</code>, dan <code>JTextComponent</code> yang seharusnya dapat dijadikan interface tersendiri pada method <code>getBorderInsets(Component c, Insets insets)</code> sebagai berikut:</p><div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Insets</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getBorderInsets</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">Component</span><span style="color:#A6ACCD;"> c</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Insets</span><span style="color:#A6ACCD;"> insets</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">Insets</span><span style="color:#A6ACCD;"> margin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Ideally we\u2019d have an interface defined for classes which</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// support margins (to avoid this hackery), but we\u2019ve</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// decided against it for simplicity</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> AbstractButton</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    margin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">AbstractButton</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getMargin</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> JToolBar</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    margin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">JToolBar</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getMargin</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">c </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> JTextComponent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    margin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">JTextComponent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">getMargin</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// rest of the code elided ...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Salah satu penyelesaian dari smell tersebut adalah dengan membuat interface bernama <code>MarginSupported</code> yang berisikan method setter dan getter Margin yang akan dipakai oleh ketiga component yaitu <code>AbstractButton</code>, <code>JToolBar</code>, dan <code>JTextComponent</code>.</p><p>Meski demikian, developer Java juga mengakui adanya kesalahan yang menyebabkan smell ini terjadi karena masalah tanggungnya developer dan kesederhanaan code.</p><h2 id="contoh-2-player-monster-and-npc-attack-problems" tabindex="-1">Contoh 2: Player, Monster, and NPC attack problems <a class="header-anchor" href="#contoh-2-player-monster-and-npc-attack-problems" aria-hidden="true">#</a></h2>`,15),A=a("Pada kasus dalam package "),F=a("GameObject.java"),C=a(", terdapat 3 class entity yang menyangkut masalah attack, dimana salah satu classnya yaitu "),u=s("code",null,"NPC",-1),m=a(" adalah entity yang tidak dapat diserang oleh entity lain. Ketika class "),g=s("code",null,"GameObject.java",-1),k=a(" dijadikan perwakilan atas entity-entity tersebut, penyerangan seharusnya tidak boleh terjadi pada "),_=s("code",null,"NPC",-1),b=a(" karena NPC tidak mempunyai darah."),f=a("Di sisi lain, dipergunakanlah class "),v=a("AttackService.java"),j=a(" untuk menyelesaikan kasus penyerangan NPC, dimana class ini menyangkut adanya conditional checking pada snippet code berikut:"),w=o(`<div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">GameObject</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> damage</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> Monster</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">Monster</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">hit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">damage</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> Player</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">Player</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">hit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">damage</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div>`,1),T=a("Snippet code/method "),S=s("code",null,"hit()",-1),P=a(" tentunya menimbulkan smell karena adanya pemakaian conditional checking yang berulang-ulang pada method tersebut. Sebagai gantinya, pada package "),x=a("AttackService"),E=a(", pemakaian polymorphism dipergunakan untuk menyelesaikan smell tersebut dengan membuat interface "),I=s("a",{href:"after/Hittable.java"},"Hittable",-1),J=a(" yang mengimplementasikan method "),M=s("code",null,"hit(int damage)",-1),N=a(" untuk dipergunakan pada class "),B=s("code",null,"Monster",-1),V=a(" dan "),H=s("code",null,"Player",-1),O=a(" dimana pada class "),G=a("AttackService.java"),X=a(" dalam package "),R=s("code",null,"after",-1),$=a(", hanya ada pemanggilan method polymorphism dari method "),W=s("code",null,"hit(GameObject obj, int damage)",-1),q=a(" sebagai berikut:"),K=o(`<div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">GameObject</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> damage</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">obj </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> Hittable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">((</span><span style="color:#A6ACCD;">Hittable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">).</span><span style="color:#82AAFF;">hit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">damage</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="julukan" tabindex="-1">Julukan <a class="header-anchor" href="#julukan" aria-hidden="true">#</a></h2><ul><li><strong>Tag class</strong>: Terjadi karena adanya pemakaian tag field (hardcoded variables) untuk cek variasi class.</li><li><strong>Missing inheritance</strong>: Adanya bagian code yang terindikasi duplikat atau pemakaian \u201Cswitch-case\u201D statements yang seharusnya digantikan dengan inheritance.</li><li><strong>Collapsed type hierarchy</strong>: Terjadi karena adanya pemakaian 2 atau lebih conditional check yang digunakan untuk menentukan behaviour.</li><li><strong>Embedded features</strong>: Terjadi karena adanya pemakaian toggle attribute untuk menentukan behaviour dari class-class lain.</li></ul><h2 id="when-to-ignore" tabindex="-1">When to Ignore <a class="header-anchor" href="#when-to-ignore" aria-hidden="true">#</a></h2><p>Smell ini dapat dibiarkan jika class tersebut difungsikan untuk pemakaian design pattern berbasis Factory class atau untuk keperluan input dari file/user prompts dengan encoding teks/inputan sebagai object dalam Java.</p>`,5);function U(Y,Z,z,L,Q,aa){const n=c("github-url");return i(),p("div",null,[y,D,h,s("p",null,[A,e(n,{to:"before/GameObject"},{default:l(()=>[F]),_:1}),C,u,m,g,k,_,b]),s("p",null,[f,e(n,{to:"before/AttackService.java"},{default:l(()=>[v]),_:1}),j]),w,s("p",null,[T,S,P,e(n,{to:"after/AttackService.java"},{default:l(()=>[x]),_:1}),E,I,J,M,N,B,V,H,O,e(n,{to:"after/AttackService.java"},{default:l(()=>[G]),_:1}),X,R,$,W,q]),K])}var ea=t(d,[["render",U]]);export{na as __pageData,ea as default};
