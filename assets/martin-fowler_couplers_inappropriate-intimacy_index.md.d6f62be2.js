import{_ as l,c as r,b as n,d as s,w as t,a as o,e as a,r as i,o as p}from"./app.34f80447.js";const j=JSON.parse('{"title":"Inappropriate Intimacy","description":"","frontmatter":{},"headers":[{"level":2,"title":"Penjelasan Smell","slug":"penjelasan-smell"},{"level":2,"title":"Penyelesaian","slug":"penyelesaian"}],"relativePath":"martin-fowler/couplers/inappropriate-intimacy/index.md"}'),c={name:"martin-fowler/couplers/inappropriate-intimacy/index.md"},d=o('<h1 id="inappropriate-intimacy" tabindex="-1">Inappropriate Intimacy <a class="header-anchor" href="#inappropriate-intimacy" aria-hidden="true">#</a></h1><p><a href="https://sourcemaking.com/refactoring/smells/inappropriate-intimacy" target="_blank" rel="noopener noreferrer">sourcemaking</a></p><h2 id="penjelasan-smell" tabindex="-1">Penjelasan Smell <a class="header-anchor" href="#penjelasan-smell" aria-hidden="true">#</a></h2><p>Smell ini terjadi karena hubungan antar class yang terlalu intim, menyebabkan class yang satu mengeksploitasi internal field dan/atau method di class lain.</p><p>Hal ini berbahaya karena class yang internal logic-nya diakses bisa mendapat perlakuan yang tidak terduga.</p>',5),_=a("Pada constructor di "),u=a("Product.java"),y=a(", class Product mengetahui ada fungsi "),h=n("code",null,"addTag",-1),g=a(" di Catalog dan menambahkan tag-nya sendiri ke Catalog."),m=o(`<div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Product</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">String</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">double</span><span style="color:#A6ACCD;"> price</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Catalog</span><span style="color:#A6ACCD;"> catalog</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">catalog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addTag</span><span style="color:#89DDFF;">(this,</span><span style="color:#A6ACCD;"> Catalog</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NEWCOMER_TAG</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Hal ini tentu berbahaya karena artinya, class Product bisa menambahkan tag apapun tanpa seizin Catalog.</p><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-hidden="true">#</a></h2><p>Catalog dan Product punya hubungan bidirectional yang tidak perlu, maka dilakukan <a href="https://sourcemaking.com/refactoring/change-bidirectional-association-to-unidirectional" target="_blank" rel="noopener noreferrer">Change Bidirectional Association to Unidirectional</a>. Dengan cara menghapus field <code>catalog</code> di dalam <code>Product</code>.</p>`,4),C=a("Semua method di class "),A=a("Catalog"),D=a(" yang berhubungan dengan manipulasi tag access modifier-nya diubah menjadi private.");function b(F,f,k,P,T,v){const e=i("github-url");return p(),r("div",null,[d,n("p",null,[_,s(e,{to:"before/Product.java"},{default:t(()=>[u]),_:1}),y,h,g]),m,n("p",null,[C,s(e,{to:"after/Catalog.java"},{default:t(()=>[A]),_:1}),D])])}var x=l(c,[["render",b]]);export{j as __pageData,x as default};
