import{_ as o,c as t,b as n,d as l,w as e,a as p,e as s,r as c,o as r}from"./app.5c0e4cd3.js";const x=JSON.parse('{"title":"Refused Bequest","description":"","frontmatter":{},"headers":[{"level":2,"title":"Penjelasan Smell","slug":"penjelasan-smell"},{"level":2,"title":"Penyelesaian","slug":"penyelesaian"},{"level":2,"title":"Tambahan","slug":"tambahan"},{"level":2,"title":"java.util.Stack","slug":"java-util-stack"}],"relativePath":"martin-fowler/oo-abusers/refused-bequest/index.md"}'),i={name:"martin-fowler/oo-abusers/refused-bequest/index.md"},y=p('<h1 id="refused-bequest" tabindex="-1">Refused Bequest <a class="header-anchor" href="#refused-bequest" aria-hidden="true">#</a></h1><p><a href="https://sourcemaking.com/refactoring/smells/refused-bequest" target="_blank" rel="noopener noreferrer">sourcemaking</a></p><h2 id="penjelasan-smell" tabindex="-1">Penjelasan Smell <a class="header-anchor" href="#penjelasan-smell" aria-hidden="true">#</a></h2><p>Refused bequest arti harafiahnya adalah &quot;menolak warisan&quot;. Dalam smell ini, sebuah class turunan tidak memakai seluruh method hasil extendsnya. Hal ini mengarah ke violasi LSP dan/atau ISP.</p>',4),D=s("Dalam contoh kasus, terdapat class "),A=s("Stack.java"),F=s(" yang melakukan extends terhadap java.util.Vector."),C=s("Di dalam class "),d=s("Stack"),u=s(", terdapat fungsi standar sebuah stack LIFO. yaitu: pop, push, dan peek."),h=p(`<div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">E</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">removeElementAt</span><span style="color:#89DDFF;">(this.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">elementAt</span><span style="color:#89DDFF;">(this.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Namun, terdapat satu masalah. java.util.Vector memiliki banyak fungsi yang memungkinkan class melakukan manipulasi data di dalam array (misalnya bisa hapus data menggunakan indeks). Tentu saja ini melanggar prinsip LIFO (Last-In First-Out).</p><p>Oleh karena itu, di class Stack, diakali dengan cara melakukan override pada masing-masing fungsi java.util.Vector yang tidak ingin digunakan, dan kita menghilangkan kinerjanya dengan cara menghapus pemanggilan super.</p><p>Sebelumnya seperti ini:</p><div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remove</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Return super kita ubah menjadi return null. Sehingga remove by index tidak terjadi.</p><div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">* you cannot remove by index, use pop instead</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">synchronized</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">remove</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Hal ini menjadi code smell <strong>Refused Bequest</strong>, karena class Stack menolak warisan dari class Vector.</p><h2 id="penyelesaian" tabindex="-1">Penyelesaian <a class="header-anchor" href="#penyelesaian" aria-hidden="true">#</a></h2><p>Untuk contoh kasus ini, kita melakukan <a href="https://sourcemaking.com/refactoring/replace-inheritance-with-delegation" target="_blank" rel="noopener noreferrer">Replace Inheritance with Delegation</a>.</p><p>Hubungan <code>is-a</code> tidak cocok untuk Stack dan Vector. Kita ubah hubungannya menjadi hubungan <code>has-a</code>.</p>`,11),m=s("class "),_=s("Stack"),k=s(" menyimpan java.util.Vector sebagai field-nya. Pop, push, dan peek dilakukan dengan Vector ini."),g=p(`<div class="language-java"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Stack</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">E</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">private</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Vector</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C792EA;">E</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> vector </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">Vector</span><span style="color:#89DDFF;">&lt;&gt;();</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">push</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">E</span><span style="color:#A6ACCD;"> data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pop</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeElementAt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">E</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">peek</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">elementAt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">vector</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">()-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="tambahan" tabindex="-1">Tambahan <a class="header-anchor" href="#tambahan" aria-hidden="true">#</a></h2><h2 id="java-util-stack" tabindex="-1">java.util.Stack <a class="header-anchor" href="#java-util-stack" aria-hidden="true">#</a></h2><p>Java sudah memiliki class Stack-nya sendiri di package <code>java.util</code>. Class Stack disini dibuat sendiri hanya untuk keperluan studi kasus. FYI, java.util.Stack adalah hasil inherit dari java.util.Vector. Anda dapat menghapus data di tengah-tengah Stack layaknya menggunakan Vector.</p>`,4);function v(b,f,E,S,j,T){const a=c("github-url");return r(),t("div",null,[y,n("p",null,[D,l(a,{to:"before/Stack.java"},{default:e(()=>[A]),_:1}),F]),n("p",null,[C,l(a,{to:"before/Stack.java"},{default:e(()=>[d]),_:1}),u]),h,n("p",null,[m,l(a,{to:"after/Stack.java"},{default:e(()=>[_]),_:1}),k]),g])}var P=o(i,[["render",v]]);export{x as __pageData,P as default};
